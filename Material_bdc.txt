REPORT zparr_mat_bdc
       NO STANDARD PAGE HEADING LINE-SIZE 255.
TYPES: BEGIN OF lty_mat,
         mid         TYPE zparr_material-mid,
         m_name      TYPE zparr_material-m_name,
         price       TYPE zparr_material-price,
         stock       TYPE zparr_material-stock,
         unit        TYPE zparr_material-unit,
         description TYPE zparr_material-description,
         currency    TYPE zparr_material-currency,
       END OF lty_mat.


DATA: lt_data TYPE TABLE OF lty_mat,
      ls_data TYPE lty_mat.

DATA: lv_file TYPE string.
DATA: lt_bdcdata TYPE TABLE OF bdcdata.
DATA: ls_bdcdata TYPE bdcdata.
DATA: lt_message TYPE TABLE OF bdcmsgcoll.
DATA: ls_message TYPE  bdcmsgcoll.
DATA: lv_mess TYPE string.
DATA: lv_line TYPE string.
DATA: lt_raw TYPE STANDARD TABLE OF string.

PARAMETERS: p_file TYPE localfile.

DATA: lt_split TYPE STANDARD TABLE OF string.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.

  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      program_name  = syst-cprog
      dynpro_number = syst-dynnr
      field_name    = ' '
    IMPORTING
      file_name     = p_file.

START-OF-SELECTION.

  lv_file = p_file.

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename = lv_file
*     filetype = 'ASC'
*     has_field_separator = 'X'   "FIELD SEPARATOR - TAB
    TABLES
      data_tab = lt_raw.
  IF sy-subrc <> 0.
    MESSAGE e004(zry_message).
  ENDIF.


  LOOP AT lt_raw INTO lv_line.
    CLEAR lt_split.
    SPLIT lv_line AT cl_abap_char_utilities=>horizontal_tab INTO TABLE lt_split.

*    CLEAR ls_data.
    READ TABLE lt_split INDEX 1 INTO ls_data-mid.
    READ TABLE lt_split INDEX 2 INTO ls_data-m_name.
    READ TABLE lt_split INDEX 3 INTO ls_data-price.
    READ TABLE lt_split INDEX 4 INTO ls_data-stock.
    READ TABLE lt_split INDEX 5 INTO ls_data-unit.
    READ TABLE lt_split INDEX 6 INTO ls_data-description.
    READ TABLE lt_split INDEX 7 INTO ls_data-currency.

    APPEND ls_data TO lt_data.
  ENDLOOP.

  DATA: lv_price TYPE char10,
        lv_stock TYPE char10.
*        lv_curr type char5.


  LOOP AT lt_data INTO ls_data.
    CLEAR: lt_bdcdata, lt_message.



    WRITE ls_data-price TO lv_price RIGHT-JUSTIFIED DECIMALS 2.
*    WRITE ls_data- TO lv_price RIGHT-JUSTIFIED DECIMALS 2.
    WRITE ls_data-stock TO lv_stock RIGHT-JUSTIFIED.


    PERFORM bdc_dynpro      USING 'SAPMSVMA' '0100'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'VIEWNAME'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=UPD'.
*perform bdc_field       using 'VIEWNAME'
*                              record-VIEWNAME_001.
*perform bdc_field       using 'VIMDYNFLDS-LTD_DTA_NO'
*                              record-LTD_DTA_NO_002.
    PERFORM bdc_dynpro      USING 'SAPLZPARR_MATERIAL' '0002'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'ZPARR_MATERIAL-M_NAME(01)'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=NEWL'.
    PERFORM bdc_dynpro      USING 'SAPLZPARR_MATERIAL' '0002'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'ZPARR_MATERIAL-CURRENCY(01)'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=SAVE'.
    PERFORM bdc_field       USING 'ZPARR_MATERIAL-MID(01)'
                                  ls_data-mid.
    PERFORM bdc_field       USING 'ZPARR_MATERIAL-M_NAME(01)'
                                  ls_data-m_name.
    PERFORM bdc_field       USING 'ZPARR_MATERIAL-PRICE(01)'
                                  lv_price.
    PERFORM bdc_field       USING 'ZPARR_MATERIAL-STOCK(01)'
                                  lv_stock.
    PERFORM bdc_field       USING 'ZPARR_MATERIAL-UNIT(01)'
                                  ls_data-unit.
    PERFORM bdc_field       USING 'ZPARR_MATERIAL-DESCRIPTION(01)'
                                  ls_data-description.
    PERFORM bdc_field       USING 'ZPARR_MATERIAL-CURRENCY(01)'
                                  ls_data-currency.
    PERFORM bdc_dynpro      USING 'SAPLZPARR_MATERIAL' '0002'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'ZPARR_MATERIAL-MID(02)'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=BACK'.
    PERFORM bdc_dynpro      USING 'SAPLZPARR_MATERIAL' '0002'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'ZPARR_MATERIAL-MID(02)'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=BACK'.
    PERFORM bdc_dynpro      USING 'SAPMSVMA' '0100'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '/EBACK'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'VIEWNAME'.
    CALL TRANSACTION 'SM30' USING lt_bdcdata MODE 'A' UPDATE 'A'
          MESSAGES INTO lt_message.

  ENDLOOP.
  LOOP AT lt_message INTO ls_message.
    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
      EXPORTING
        msgid               = ls_message-msgid
        msgnr               = ls_message-msgnr
        msgv1               = ls_message-msgv1
        msgv2               = ls_message-msgv2
        msgv3               = ls_message-msgv3
        msgv4               = ls_message-msgv4
      IMPORTING
        message_text_output = lv_mess.

    WRITE: / lv_mess.
  ENDLOOP.

*---------------------------------------------------------------------*
* BDC helper routines
*---------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.
  CLEAR ls_bdcdata.
  ls_bdcdata-program  = program.
  ls_bdcdata-dynpro   = dynpro.
  ls_bdcdata-dynbegin = 'X'.
  APPEND ls_bdcdata TO lt_bdcdata.
ENDFORM.

FORM bdc_field USING fnam fval.
  CLEAR ls_bdcdata.
  ls_bdcdata-fnam = fnam.
  ls_bdcdata-fval = fval.
  APPEND ls_bdcdata TO lt_bdcdata.
ENDFORM.