*&---------------------------------------------------------------------*
*& Report ZPARR_FORM
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*


REPORT zparr_form.


DATA: lv_oid TYPE zparr_order-order_id.                "local variable for storing order id "
lv_oid = 'ORDE1234'.

DATA: lv_fname              TYPE rs38l_fnam,                "Function module name (used when calling smartforms)
      lv_file               TYPE xstring,                   "Binary content of the generated PDF file
      lt_lines              TYPE TABLE OF tline,            "Table to hold text lines (often used for Smart Form output)
      lt_binary_tab         TYPE solix_tab,                 "Binary content in table form (used for email attachments)
      lo_bcs                TYPE REF TO cl_bcs,             "Business Communication Services (BCS) main class for sending emails
      lo_sapuser            TYPE REF TO cl_sapuser_bcs,     " Represents a SAP user to send email to (BCS recipient)
      lt_text               TYPE soli_tab,                  "Email body text in table format
      ls_text               TYPE soli,                      "Single line of email body text
      lo_document           TYPE REF TO cl_document_bcs,    "Document object to hold the email content and attachments
      lv_subject            TYPE so_obj_des,                "Subject line of the email
      lv_result             TYPE os_boolean,                "Boolean result (used to check success/failure)
      ls_control_parameters TYPE ssfctrlop,         "Control parameters for Smart Form execution
      ls_job_output_info    TYPE ssfcrescl,          "Output info returned by Smart Form
      ls_output_options     TYPE ssfcompop.          "Output options for Smart Form (e.g., print settings)




CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
  EXPORTING
    formname           = 'ZPARR_FORM'     "Name of the Smart Form
*   VARIANT            = ' '
*   DIRECT_CALL        = ' '
  IMPORTING
    fm_name            = lv_fname         "Returns the name of the generated function module
  EXCEPTIONS
    no_form            = 1
    no_function_module = 2
    OTHERS             = 3.
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.

ls_control_parameters-no_dialog = 'X'.      " Suppress the print dialog popup when calling the Smart Form
ls_control_parameters-preview = 'X'.        " Display a preview of the Smart Form output
ls_output_options-tddest = 'LOCL'.       "local printer
ls_control_parameters-getotf    = 'X'.   " Retrieve the OTF (Output Text Format) data instead of sending directly to printer


CALL FUNCTION lv_fname             " generates form output with provided paramenter
  EXPORTING
*   ARCHIVE_INDEX      =
*   ARCHIVE_INDEX_TAB  =
*   ARCHIVE_PARAMETERS =
    control_parameters = ls_control_parameters      "Control settings for Smart Form execution
*   MAIL_APPL_OBJ      =
*   MAIL_RECIPIENT     =
*   MAIL_SENDER        =
    output_options     = ls_output_options          " Output options like printer device
    user_settings      = ' '
    lv_oid             = lv_oid         "passing the order id
  IMPORTING
*   DOCUMENT_OUTPUT_INFO       =
    job_output_info    = ls_job_output_info
*   JOB_OUTPUT_OPTIONS =
  EXCEPTIONS
    formatting_error   = 1
    internal_error     = 2
    send_error         = 3
    user_canceled      = 4
    OTHERS             = 5.
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.


IF ls_job_output_info-otfdata IS INITIAL.      "if data is not present
  MESSAGE 'OTF DATA IS EMPTY' TYPE 'E'.
ENDIF.

CALL FUNCTION 'CONVERT_OTF'                  " Convert the SmartForm output (in OTF format) to PDF format
  EXPORTING
    format                = 'PDF'           "format in which we want smartform
*   MAX_LINEWIDTH         = 132
*   ARCHIVE_INDEX         = ' '
*   COPYNUMBER            = 0
*   ASCII_BIDI_VIS2LOG    = ' '
*   PDF_DELETE_OTFTAB     = ' '
*   PDF_USERNAME          = ' '
*   PDF_PREVIEW           = ' '
*   USE_CASCADING         = ' '
*   MODIFIED_PARAM_TABLE  =
  IMPORTING
*   BIN_FILESIZE          =
    bin_file              = lv_file                      " Output Binary content of the PDF (xstring format)
  TABLES
    otf                   = ls_job_output_info-otfdata     "Input: The OTF data generated by the Smart Form
    lines                 = lt_lines                       " Output: PDF content as table of text lines
  EXCEPTIONS
    err_max_linewidth     = 1
    err_format            = 2
    err_conv_not_possible = 3
    err_bad_otf           = 4
    OTHERS                = 5.
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.

CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'         "This is needed to prepare the PDF as an email attachment
  EXPORTING
    buffer     = lv_file                    " The PDF content in xstring format (from CONVERT_OTF)
*   APPEND_TO_TABLE       = ' '
* IMPORTING
*   OUTPUT_LENGTH         =
  TABLES
    binary_tab = lt_binary_tab.    " PDF content in binary table format (used for attachment)


TRY.

    " Create a persistent BCS email object
    " This is the starting point for building and sending an email in SAP

    CALL METHOD cl_bcs=>create_persistent
      RECEIVING
        result = lo_bcs.                       "will hold the email object used for adding recipients, documents, etc.
  CATCH cx_send_req_bcs .
ENDTRY.

TRY.
    CALL METHOD cl_sapuser_bcs=>create           " is used to specify the recipient of the email
      EXPORTING
        i_user = 'JPRIYAN'
      RECEIVING
        result = lo_sapuser.                        "hold the SAP user object
  CATCH cx_address_bcs .
ENDTRY.

TRY.
    CALL METHOD lo_bcs->add_recipient                    "Add a recipient to the email objec
      EXPORTING
        i_recipient = lo_sapuser
*       i_express   =
*       i_copy      =
*       i_blind_copy =
*       i_no_forward =
      .
  CATCH cx_send_req_bcs .
ENDTRY.

**TRY.
*CALL METHOD cl_cam_address_bcs=>create_internet_address
*  EXPORTING
*    i_address_string =
**    i_address_name   =
**    i_incl_sapuser   =
*  receiving
*    result           =
*    .
** CATCH cx_address_bcs .
**ENDTRY.
*
*ls_text-line = 'Order Details'.
*APPEND ls_text TO lt_text.
*CLEAR ls_text.

ls_text-line = 'Hello Recipient'.
APPEND ls_text TO lt_text.
CLEAR ls_text.

ls_text-line = 'Hope youâ€™re well'.
APPEND ls_text TO lt_text.
CLEAR ls_text.

ls_text-line = 'Please see attached invoice  for SmartSale'.
APPEND ls_text TO lt_text.
CLEAR ls_text.

ls_text-line = ' Please let us know if everything looks good or if you need any further details.'.
APPEND ls_text TO lt_text.
CLEAR ls_text.

ls_text-line = 'Thanks and Regrads'.
APPEND ls_text TO lt_text.
CLEAR ls_text.

ls_text-line = 'SmartSales'.
APPEND ls_text TO lt_text.
CLEAR ls_text.



TRY.

    " This document will be the content (body) of the email
    CALL METHOD cl_document_bcs=>create_document
      EXPORTING
        i_type    = 'RAW'                                          "type of document
        i_subject = 'SmartSales Invoice Details'              " Subject of the email document
*       i_length  =
*       i_language     = SPACE
*       i_importance   =
*       i_sensitivity  =
        i_text    = lt_text                       "body content of the email
*       i_hex     =
*       i_header  =
*       i_sender  =
*       iv_vsi_profile =
      RECEIVING
        result    = lo_document.                  "document object is created and returned for use in the email
  CATCH cx_document_bcs .
ENDTRY.


IF lt_text IS INITIAL.                                         "if no text is passed
  MESSAGE 'Text is empty' TYPE 'E'.

ENDIF.

CONCATENATE 'Order Number' ':' lv_oid INTO lv_subject.               "order number is attached as a title for pdf

TRY.
    CALL METHOD lo_document->add_attachment                    "adding attachment with email
      EXPORTING
        i_attachment_type    = 'PDF'                    "format in which attachment will be downloaded
        i_attachment_subject = lv_subject                   "Subject of the attachment
        i_att_content_hex    = lt_binary_tab.    "binary content of the PDF (converted earlier using SCMS_XSTRING_TO_BINARY)
  CATCH cx_document_bcs .
ENDTRY.

TRY.
    CALL METHOD lo_bcs->set_document   "Set the previously created document (email body and attachment) to the email object
      EXPORTING
        i_document = lo_document.   "document containing the email body and attachment
  CATCH cx_send_req_bcs .
ENDTRY.


TRY.
    CALL METHOD lo_bcs->set_send_immediately  "Set the flag to send the email immediately
      EXPORTING
        i_send_immediately = 'X'.   "flag for sendingmail "
  CATCH cx_send_req_bcs .
ENDTRY.

TRY.
    CALL METHOD lo_bcs->send    "Trigger the actual sending of the email
*  EXPORTING
*    i_with_error_screen = SPACE
      RECEIVING
        result = lv_result.   "Result will be 'X' if sending was successful
  CATCH cx_send_req_bcs .
ENDTRY.

IF lv_result IS NOT INITIAL.    "if lv_result is X means not initial"

  MESSAGE 'Mail sent successfully' TYPE 'I'.

  COMMIT WORK.  "Ensures the email gets processed and delivered"

ENDIF.